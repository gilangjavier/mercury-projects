name: Docker Build, Push, and Helm Chart Release

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Backend Docker Image
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/golang-backend ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/golang-backend

      - name: Build and Push Frontend Docker Image
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/nodejs-frontend ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/nodejs-frontend

  release-helm-chart:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: 'latest'

      - name: Release Helm Chart
        uses: helm/chart-releaser-action@v2
        with:
          chart_glob: "path/to/charts/*"
        env:
          CR_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-argocd:
    needs: release-helm-chart
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up ArgoCD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd

      - name: Login to ArgoCD
        run: |
          argocd login <argocd-server> --insecure --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }}
          # Replace <argocd-server> with the URL of your ArgoCD server

      - name: Update Helm Chart in ArgoCD
        run: |
          argocd app set <your-app-name> --version <new-chart-version>
          argocd app sync <your-app-name>
          # Replace <your-app-name> with the name of your ArgoCD application
          # Replace <new-chart-version> with the version of the Helm chart you want to use